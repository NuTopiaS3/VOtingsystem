
import firebase_admin
from firebase_admin import credentials, initialize_app, db as firebase_db
from kivy.config import Config
from kivymd.app import MDApp
from kivy.lang import Builder
from kivy.uix.screenmanager import Screen,ScreenManager
from kivy.animation import Animation
import os,sys
from kivy.resources import resource_add_path, resource_find
from kivy.core.window import Window
from kivy.uix.floatlayout import FloatLayout
import pyrebase

# Firebase configuration
config = {
    "apiKey": "AIzaSyDy-x6jIFpY-Kb4rsCk1-0SRTwSQlD2R3E",
    "authDomain": "voting-system-gugan.firebaseapp.com",
    "databaseURL": "https://voting-system-gugan-default-rtdb.asia-southeast1.firebasedatabase.app",
    "projectId": "voting-system-gugan",
    "storageBucket": "voting-system-gugan.appspot.com",
    "messagingSenderId": "1044881782390",
    "appId": "1:1044881782390:web:571667c95213fc7a5f9157"
}

# Initialize Firebase app
firebase = pyrebase.initialize_app(config)
db = firebase.database()
storage = firebase.storage()

# Disabling Right Click
Config.set('input', 'mouse', 'mouse,disable_multitouch')

class LoginScreen(Screen):
    pass

class PrefectScreen(Screen):
    pass

class PrefectgScreen(Screen):
    pass

class StudentScreen(Screen):
    pass

class Maplec(Screen):
    pass

class Maplev(Screen):
    pass

class Cedarc(Screen):
    pass

class Cedarv(Screen):
    pass

class Oakc(Screen):
    pass

class Oakv(Screen):
    pass

class Pinec(Screen):
    pass

class Pinev(Screen):
    pass
kv1 = "D:/Gugan/VOtingsystem/main.kv"

class MainApp(MDApp):
    current_admin_house = ''
    current_admin_id = None
    categories = None
    def build(self):
        self.sc = ScreenManager()
        self.sc.add_widget(LoginScreen(name='log'))
        self.sc.add_widget(PrefectScreen(name='votepb'))
        self.sc.add_widget(PrefectgScreen(name='votepg'))
        self.sc.add_widget(StudentScreen(name='votes'))
        self.sc.add_widget(Maplec(name='maplec'))
        self.sc.add_widget(Maplev(name='maplev'))
        self.sc.add_widget(Cedarc(name='cedarc'))
        self.sc.add_widget(Cedarv(name='cedarv'))
        self.sc.add_widget(Oakc(name='oakc'))
        self.sc.add_widget(Oakv(name='oakv'))
        self.sc.add_widget(Pinec(name='pinec'))
        self.sc.add_widget(Pinev(name='pinev'))
        return self.sc

    def on_start(self):
        self.init_vote_functions()

    def init_vote_functions(self):
        categories = [
            ('cedar_captain_cont1', 'cedarv'), ('cedar_captain_cont2', 'cedarv'),
            ('cedar_captain_cont3', 'cedarv'), ('cedar_captain_cont4', 'cedarv'),
            ('maple_captain_cont1', 'maplev'), ('maple_captain_cont2', 'maplev'),
            ('maple_captain_cont3', 'maplev'), ('maple_captain_cont4', 'maplev'),
            ('oak_captain_cont1', 'oakv'), ('oak_captain_cont2', 'oakv'),
            ('oak_captain_cont3', 'oakv'), ('oak_captain_cont4', 'oakv'),
            ('pine_captain_cont1', 'pinev'), ('pine_captain_cont2', 'pinev'),
            ('pine_captain_cont3', 'pinev'), ('pine_captain_cont4', 'pinev'),
            ('prefect_boy_cont1', 'votepg'), ('prefect_boy_cont2', 'votepg'),
            ('prefect_boy_cont3', 'votepg'), ('prefect_boy_cont4', 'votepg'),
            ('prefect_girl_cont1', 'votes'), ('prefect_girl_cont2', 'votes'),
            ('prefect_girl_cont3', 'votes'), ('prefect_girl_cont4', 'votes'),
            ('student_council_cont1', 'votes'), ('student_council_cont2', 'votes'),
            ('student_council_cont3', 'votes'), ('student_council_cont4', 'votes'),
        ]
        self.categories = categories  # Assign categories to the class variable
        for category, screen in categories:
            # For student council votes, use handle_student_council_vote
            if 'student_council' in category:
                from functools import partial
                cast_vote_for_category = partial(self.handle_student_council_vote, category)
            else:
                from functools import partial
                cast_vote_for_category = partial(self.cast_vote, category)
            
            # Dynamically assign this new method to handle votes for the category
            setattr(self, category, cast_vote_for_category)

    def cast_vote(self, category):
        if self.current_admin_id:
            db.child("result").child(category).child(self.current_admin_id).set(True)
            print(f"Vote recorded for {category} by {self.current_admin_id}")

            if self.categories:
                # Find the index of the current category in categories list
                current_index = -1
                for index, (cat, scr) in enumerate(self.categories):
                    if cat == category:
                        current_index = index
                        break

                # Check if the current category is found in the categories list
                if current_index != -1 and current_index < len(self.categories) - 1:
                    next_screen = self.categories[current_index + 1][1]
                    self.sc.current = next_screen
                    print("Navigating to next screen after vote:", next_screen)
                else:
                    print("Last vote cast. No further navigation required.")
            else:
                print("Categories list is not initialized. Cannot determine next screen.")
        else:
            print("User not logged in or ID not set.")
                
    def handle_student_council_vote(self, category):
        self.cast_vote(category)  # Cast the vote
        try:
            # Get the next screens based on the user's house
            house_captain_screen = self.get_house_captain_screen()
            house_vice_captain_screen = self.get_house_vice_captain_screen()
            
            if house_captain_screen:
                # Navigate to the house captain screen
                self.sc.current = house_captain_screen
                print("Navigating to house captain screen:", house_captain_screen)
            elif house_vice_captain_screen:
                # If house captain screen not found but vice captain screen found, navigate to vice captain screen
                self.sc.current = house_vice_captain_screen
                print("Navigating to house vice captain screen:", house_vice_captain_screen)
            else:
                print("Neither house captain nor vice captain screen found.")
                # If neither house captain nor vice captain screen found, navigate directly to 'log'
                self.sc.current = 'log'
        except Exception as e:
            print("Error determining next screen after student council vote:", str(e))
            # If any error occurs, navigate to 'log'
            self.sc.current = 'log'

    def get_house_captain_screen(self):
        house_to_captain_screen_mapping = {
            'Cedar': 'cedarc',
            'Maple': 'maplec',
            'Oak': 'oakc',
            'Pine': 'pinec',
        }
        current_house = self.get_current_user_house()  # Assuming you have a method to get the current user's house
        return house_to_captain_screen_mapping.get(current_house)

    def get_house_vice_captain_screen(self):
        house_to_vice_captain_screen_mapping = {
            'Cedar': 'cedarv',
            'Maple': 'maplev',
            'Oak': 'oakv',
            'Pine': 'pinev',
        }
        current_house = self.get_current_user_house()  # Assuming you have a method to get the current user's house
        return house_to_vice_captain_screen_mapping.get(current_house)

    def get_current_user_house(self):
        return self.current_admin_house

    def login(self, user, passw, error):
        admins = db.child("Admin").get().val() or {}
        for admin_id, admin_data in admins.items():
            if admin_data.get("ID") == user.text and admin_data.get("Password") == passw.text:
                if not admin_data.get("Voted", False):
                    # Export user ID and house information
                    self.current_admin_id = admin_id
                    self.current_admin_house = admin_data["House"]
                    
                    # Update voted status and navigate to voting page
                    db.child("Admin").child(admin_id).update({"Voted": True})
                    self.sc.current = 'votepb'
                    print("Login Successful")
                    return
                else:
                    error.text = "You have already voted."
                    return
        error.text = "Login failed. Please check your credentials."

Window.fullscreen = True
Window.size=(1920,1080)

if __name__ == "__main__":
    try:
        if hasattr(sys, "_MEIPASS"):
            resource_add_path(os.path.join(sys._MEIPASS))
        app = MainApp()
        app.run()
    except Exception as e:
        print(e)
        input("Press enter.")